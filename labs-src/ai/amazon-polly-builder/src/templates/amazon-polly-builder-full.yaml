AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"

Description: >
  Amazon Polly Builder Demo Template.

Parameters:
  S3BucketName:
    Type: String
    Description: The S3 bucket where your static assets will be stored. Select a unique name.
    Default: "your-unique-bucket-name"

Resources:
  ApiFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonPollyFullAccess

  ApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: "amazon-polly-demo"
        S3Key: "Amazon-Polly-Builder-PollyLambda.zip"
      FunctionName: !Sub 'AmazonPollyBuilder-${S3BucketName}-ApiHandler'
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt ApiFunctionExecutionRole.Arn
      Runtime: python2.7
      Timeout: 30

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      CorsConfiguration:
        AllowHeaders:
          - '*'
        AllowMethods:
          - '*'
        AllowOrigins:
          - '*'
      Name: AIServicesDemo-Amazon-Polly-Api
      ProtocolType: HTTP
      Target: !GetAtt ApiFunction.Arn

  ApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ApiFunction
      Principal: apigateway.amazonaws.com

  S3Resources:
    Type: AWS::S3::Bucket
    DependsOn: Api
    Properties:
      BucketName: !Ref S3BucketName

  CustomResourceLambdaRole:
    Type: AWS::IAM::Role
    DependsOn: S3Resources
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [ {
                         "Effect": "Allow",
                         "Principal": {
                           "Service": [ "lambda.amazonaws.com" ]
                         },
                         "Action": [ "sts:AssumeRole" ]
                       } ]
      }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: !Sub "${S3BucketName}-custom-role"

  LambdaHelperFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'AmazonPollyBuilder-${S3BucketName}-HelperFunction'
      Code:
        ZipFile: |

          import boto3, json, os, re, zipfile
          import cfnresponse

          s3 = boto3.client('s3')
          s3_resource = boto3.resource('s3')

          def handler(event, context):
            print(event)
            new_bucket_name = os.environ['resourcesbucket']
            bucket_to_copy = "amazon-polly-demo"
            bucket = s3_resource.Bucket(new_bucket_name)
            s3_resource.Object('amazon-polly-demo', 'assets.txt').download_file('/tmp/assets.txt')
            assets = open("/tmp/assets.txt", "r").read().split('\n')

            for line in assets:
              print(line)
              copy_source = {'Bucket': bucket_to_copy,'Key': line}
              s3_resource.meta.client.copy(copy_source, new_bucket_name, line)

            file_name = "api-gateway-endpoint.js"
            lambda_path = "/tmp/" + file_name
            s3_path = "js/" + file_name
            text = "const apiEndpoint=\\'"+os.environ["url"]+"\\'\;"
            os.system("echo " + text +  ">"+lambda_path)
            s3.upload_file(lambda_path, new_bucket_name, s3_path)
            responseData = {}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomResourceLambdaRole
          - Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          resourcesbucket: !Ref S3Resources
          url: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com'

  LambdaFirstInvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: LambdaHelperFunction
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaHelperFunction.Arn

  Cloudfrontoriginaccessidentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    DependsOn: S3Resources
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Amazon-Polly-Builder-OAI"

  CloudFrontDistribution: {
    Type: "AWS::CloudFront::Distribution",
    DependsOn: Cloudfrontoriginaccessidentity,
    Properties: {
      DistributionConfig: {
        Enabled: true,
        DefaultRootObject: "index.html",
        PriceClass: "PriceClass_All",
        DefaultCacheBehavior: {
          TargetOriginId: "Amazon-Polly-Builder-Demo",
          ViewerProtocolPolicy: "allow-all",
          MinTTL: 0,
          AllowedMethods: [
            "HEAD",
            "GET"
          ],
          CachedMethods: [
            "HEAD",
            "GET"
          ],
          ForwardedValues: {
            QueryString: "true",
            Cookies: {
              Forward: "none"
            }
          }
        },
        Origins: [
        {
          DomainName: !Sub '${S3Resources}.s3-${AWS::Region}.amazonaws.com',
          Id: "Amazon-Polly-Builder-Demo",
          S3OriginConfig: {
            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${Cloudfrontoriginaccessidentity}"
          }
        }
        ],
        Restrictions: {
          GeoRestriction: {
            RestrictionType: "none",
            Locations: [
            ]
          }
        },
        ViewerCertificate: {
          CloudFrontDefaultCertificate: "true",
          MinimumProtocolVersion: "TLSv1"
        }
      }
    }
  }

  SampleBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: CloudFrontDistribution
    Properties:
      Bucket: !Ref S3Resources

      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Resources
                  - "/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${Cloudfrontoriginaccessidentity}"

Outputs:
  CloudFrontEndpoint:
    Description: The Cloudfront Endpoint
    Value:
      Fn::GetAtt: [ "CloudFrontDistribution", "DomainName" ]
